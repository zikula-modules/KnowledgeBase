<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger <info@guite.de>.
 * @link https://guite.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Wed Jan 04 20:13:48 CET 2012.
 */


/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for ticket entities.
 */
class KnowledgeBase_Entity_Repository_Ticket extends KnowledgeBase_Entity_Repository_Base_Ticket
{
    public function incrementViews($id = 0)
    {
        if ($id == 0 || !is_numeric($id)) {
            return false;
        }

        $query = $this->getEntityManager()
                 ->createQuery('UPDATE KnowledgeBase_Entity_Ticket SET views = views + 1 WHERE id = ?1');
        $query->setParameter(1, $id);
        $query->execute();
    }

    public function incrementRatesUp($id = 0)
    {
        if ($id == 0 || !is_numeric($id)) {
            return false;
        }

        $query = $this->getEntityManager()
                 ->createQuery('UPDATE KnowledgeBase_Entity_Ticket SET ratesUp = ratesUp + 1 WHERE id = ?1');
        $query->setParameter(1, $id);
        $query->execute();
    }

    public function incrementRatesDown($id = 0)
    {
        if ($id == 0 || !is_numeric($id)) {
            return false;
        }

        $query = $this->getEntityManager()
                 ->createQuery('UPDATE KnowledgeBase_Entity_Ticket SET ratesDown = ratesDown + 1 WHERE id = ?1');
        $query->setParameter(1, $id);
        $query->execute();
    }

    /**
     * Build a generic Doctrine query supporting WHERE and ORDER BY
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     *
     * @return Doctrine\ORM\Query query instance to be further processed
     */
    protected function _intBaseQuery($where = '', $orderBy = '', $useJoins = true)
    {
        $selection = 'tbl';
        if ($useJoins === true) {
            $selection .= $this->addJoinsToSelection();
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select($selection)
           ->from('KnowledgeBase_Entity_Ticket', 'tbl');

        if ($useJoins === true) {
            $this->addJoinsToFrom($qb);
        }

        if (!empty($where)) {
            $qb->where($where);
        }


// TODO - see https://github.com/zikula/core/issues/118
        // use FilterUtil to support generic filtering
        //$fu = new FilterUtil('KnowledgeBase', $this);

        // you could set explicit filters at this point, something like
        // $fu->setFilter('type:eq:' . $args['type'] . ',id:eq:' . $args['id']);
        // supported operators: eq, ne, like, lt, le, gt, ge, null, notnull

        // process request input filters and add them to the query.
        //$fu->enrichQuery($query);

        $filter = '';
        /*if (isset($args['filter'])) {
            $filter = $args['filter'];
        }*/
        $searchterm = /*((isset($args['term']) ? $args['term'] : */FormUtil::getPassedValue('term', '', 'GET');//));
        if (!empty($searchterm)) {
            //if (!empty($filter)) $filter .= ',';
            //$filter .= 'subject:like:%' . $searchterm . '%,content:like:%' . $searchterm . '%';
            if (!empty($filter)) $filter .= ' AND ';
            $filter .= '(subject LIKE \'%' . DataUtil::formatForStore($searchterm) . '%\' OR content LIKE \'%' . DataUtil::formatForStore($searchterm) . '%\')';
        }
        if (!empty($filter)) {
            //$fu->setFilter($filter);
            $qb->where($filter);
        }


        // add order by clause
        if (!empty($orderBy)) {
            $qb->add('orderBy', 'tbl.' . $orderBy);
        }

        $query = $qb->getQuery();

        return $query;
    }
}
