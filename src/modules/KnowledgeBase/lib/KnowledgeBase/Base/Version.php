<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @link http://zikula.org
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger.
 * @url https://guite.de
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Feb 17 14:43:00 CET 2011.
 */

/**
 * Version information base class.
 */
class KnowledgeBase_Base_Version extends Zikula_AbstractVersion
{
    public function getMetaData()
    {
        $meta = array();
        // the current module version
        $meta['version'] = '1.0.0';
        // the displayed name of the module
        $meta['displayname'] = $this->__('KnowledgeBase');
        // the module description
        $meta['description'] = $this->__('The knowledge base module provides a categorised archive for recurring questions and answers to improve community support.');
        //! url version of name, should be in lowercase without space
        $meta['url'] = $this->__('KnowledgeBase');
        // minimum core requirement
        $meta['core_min'] = '1.3.0'; // Fixed to 1.3.x range
        $meta['core_max'] = '1.3.99'; // Fixed to 1.3.x range

        // define special capabilities of this module
        $meta['capabilities'] = array(
            HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true) /*,
             HookUtil::PROVIDER_CAPABLE => array('enabled' => true), // TODO: see #115
             'authentication' => array('version' => '1.0'),
             'profile'        => array('version' => '1.0', 'anotherkey' => 'anothervalue'),
             'message'        => array('version' => '1.0', 'anotherkey' => 'anothervalue')
             */
        );

        // permission schema
        // DEBUG: permission schema aspect starts
        $meta['securityschema'] = array(
            'KnowledgeBase::'       => '::',

            'KnowledgeBase:Ticket:' => 'TicketID::'
        );
        // DEBUG: permission schema aspect ends

        return $meta;
    }

    /**
     * Define hook subscriber bundles.
     */
    protected function setupHookBundles()
    {

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.ui_hooks.knowledgebase.tickets', 'ui', __('Tickets'));
        // Display hook for view/display templates.
        $bundle->addEvent('display_view', 'knowledgebase.ui_hooks.tickets.display_view');
        // Display hook for create/edit forms.
        $bundle->addEvent('form_edit', 'knowledgebase.ui_hooks.tickets.form_edit');
        // Display hook for delete dialogues
        $bundle->addEvent('form_delete', 'knowledgebase.ui_hooks.tickets.form_delete');
        // Validate input from an ui create/edit form.
        $bundle->addEvent('validate_edit', 'knowledgebase.ui_hooks.tickets.validate_edit');
        // Validate input from an ui create/edit form (generally not used).
        $bundle->addEvent('validate_delete', 'knowledgebase.ui_hooks.tickets.validate_delete');
        // Perform the final update actions for a ui create/edit form.
        $bundle->addEvent('process_edit', 'knowledgebase.ui_hooks.tickets.process_edit');
        // Perform the final delete actions for a ui form.
        $bundle->addEvent('process_delete', 'knowledgebase.ui_hooks.tickets.process_delete');
        $this->registerHookSubscriberBundle($bundle);

        $bundle = new Zikula_HookManager_SubscriberBundle($this->name, 'subscriber.knowledgebase.filter_hooks.tickets', 'ui', __('Tickets'));
        // A filter applied to the given area.
        $bundle->addEvent('ui.filter', 'knowledgebase.filter_hook.tickets.filter');
        $this->registerHookSubscriberBundle($bundle);

    }
}

