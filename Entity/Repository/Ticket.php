<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger (Guite)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@guite.de>.
 * @link https://guite.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

namespace Guite\KnowledgeBaseModule\Entity\Repository;

use Guite\KnowledgeBaseModule\Entity\Repository\Base\Ticket as BaseTicket;
use Doctrine\ORM\QueryBuilder;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for ticket entities.
 */
class Ticket extends BaseTicket
{
    public function incrementViews($id = 0)
    {
        if ($id == 0 || !is_numeric($id)) {
            return false;
        }

        $query = $this->getEntityManager()
                 ->createQuery('UPDATE KnowledgeBase_Entity_Ticket SET views = views + 1 WHERE id = ?1');
        $query->setParameter(1, $id);
        $query->execute();
    }

    public function incrementRatesUp($id = 0)
    {
        if ($id == 0 || !is_numeric($id)) {
            return false;
        }

        $query = $this->getEntityManager()
                 ->createQuery('UPDATE KnowledgeBase_Entity_Ticket SET ratesUp = ratesUp + 1 WHERE id = ?1');
        $query->setParameter(1, $id);
        $query->execute();
    }

    public function incrementRatesDown($id = 0)
    {
        if ($id == 0 || !is_numeric($id)) {
            return false;
        }

        $query = $this->getEntityManager()
                 ->createQuery('UPDATE KnowledgeBase_Entity_Ticket SET ratesDown = ratesDown + 1 WHERE id = ?1');
        $query->setParameter(1, $id);
        $query->execute();
    }

    /**
     * Helper method to add join selections.
     *
     * @return String Enhancement for select clause.
     */
    protected function addJoinsToSelection()
    {
         $selection = ', tblCategories, tblCategory';

         return $selection;
    }

    /**
     * Helper method to add joins to from clause.
     *
     * @param QueryBuilder $qb query builder instance used to create the query.
     *
     * @return String Enhancement for from clause.
     */
    protected function addJoinsToFrom(QueryBuilder $qb)
    {
        $qb->leftJoin('tbl.categories', 'tblCategories');
        $qb->leftJoin('tblCategories.category', 'tblCategory');

        return $qb;
    }
}
