<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @link http://zikula.org
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger.
 * @url https://guite.de
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Feb 17 14:43:00 CET 2011.
 */

/**
 * This is the User controller class.
 */
class KnowledgeBase_Controller_Base_User extends Zikula_Controller
{
    /**
     * Post initialise.
     *
     * Run after construction.
     *
     * @return void
     */
    protected function postInitialize()
    {
        // Set caching to true by default.
        $this->view->setCaching(true);
    }

    /**
     * This method is the default function, and is called whenever the
     * module's User area is called without defining arguments.
     *
     * @params       TODO
     * @return mixed Output.
     */
    public function main($args)
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('KnowledgeBase::', '::', ACCESS_OVERVIEW));
        // DEBUG: permission check aspect ends

        // return main template
        return $this->view->fetch('user/main.tpl');
    }

    /**
     * This method provides a generic item list overview.
     *
     * @params       TODO
     * @param string  $ot           Treated object type.
     * @param string  $sort         Sorting field.
     * @param string  $sdir         Sorting direction.
     * @param int     $pos          Current pager position.
     * @param int     $num          Amount of entries to display.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     * @return mixed Output.
     */
    public function view($args)
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('KnowledgeBase::', '::', ACCESS_READ));
        // DEBUG: permission check aspect ends

        // parameter specifying which type of objects we are treating
        $objectType = FormUtil::getPassedValue('ot', 'ticket', 'GET', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'View');
        if (!in_array($objectType, KnowledgeBase_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = KnowledgeBase_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
        }
        // instantiate a new collection corresponding to $objectType
        $objectCollection = KnowledgeBase_Factory::getBusinessCollection($objectType, 'controllerAction', array('controller' => 'user', 'action' => 'View'));

        $tpl = FormUtil::getPassedValue('tpl', '', 'GET', FILTER_SANITIZE_STRING);
        if ($tpl == 'nestedSet') {
            $useMultipleRoots = method_exists($objectCollection, 'selectAllTrees');
            $this->view->assign('useMultipleRoots', $useMultipleRoots);
            if ($useMultipleRoots) {
                $this->view->assign('trees', $objectCollection->selectAllTrees());
            } else {
                $this->view->assign('items', $objectCollection->selectTree());
            }

            // fetch and return the appropriate template
            return KnowledgeBase_Util_View::processTemplate($this->view, 'user', $objectType, 'view', $args);
        }

        // parameter for used sorting field
        $sort = FormUtil::getPassedValue('sort', '', 'GET', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $objectCollection->get_intAllowedSortingFields())) {
            $sort = $objectCollection->get_intDefaultSortingField();
        }

        // parameter for used sort order
        $sdir = FormUtil::getPassedValue('sdir', '', 'GET', FILTER_SANITIZE_STRING);
        if ($sdir != 'asc' && $sdir != 'desc')
            $sdir = 'asc';

        // the current offset which is used to calculate the pagination
        $currentPage = (int)FormUtil::getPassedValue('pos', 1, 'GET', FILTER_VALIDATE_INT);

        // the number of items displayed on a page for pagination
        $resultsPerPage = (int)FormUtil::getPassedValue('num', 0, 'GET', FILTER_VALIDATE_INT);
        if ($resultsPerPage == 0) {
            $csv = (int)FormUtil::getPassedValue('usecsvext', 0, 'GET', FILTER_VALIDATE_INT);
            $resultsPerPage = ($csv == 1) ? 999999 : 100;//$this->getVar('pagesize', 10);
        }

        // convenience vars to make code clearer
        $where = '';
        $sortParam = $sort . ' ' . $sdir;

        // get objects from database
        // while the result will be saved in the object, we assign in to a local variable for convenience.
        $objectData = $objectCollection->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);

        // get total number of records for building the pagination by method call
        $objectCount = $objectCollection->selectCount($where);
        // TODO: check if Doctrine_Pager::getNumResults() has the same performance

        // assign the object data, sorting information and details for creating the pager
        $this->view->assign('items', $objectData)
                   ->assign('sort', $sort)
                   ->assign('sdir', $sdir)
                   ->assign('currentPage', $currentPage)
                   ->assign('pager', array('numitems'     => $objectCount,
                                           'itemsperpage' => $resultsPerPage));

        // fetch and return the appropriate template
        return KnowledgeBase_Util_View::processTemplate($this->view, 'user', $objectType, 'view', $args);
    }

    /**
     * This method provides a generic item detail view.
     *
     * @params       TODO
     * @param string  $ot           Treated object type.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     * @return mixed Output.
     */
    public function display($args)
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('KnowledgeBase::', '::', ACCESS_READ));
        // DEBUG: permission check aspect ends

        // parameter specifying which type of objects we are treating
        $objectType = FormUtil::getPassedValue('ot', 'ticket', 'GET');
        $utilArgs = array('controller' => 'user', 'action' => 'Display');
        if (!in_array($objectType, KnowledgeBase_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = KnowledgeBase_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
        }
        // instantiate a new entity corresponding to $objectType
        $object = KnowledgeBase_Factory::getBusinessEntity($objectType, 'controllerAction', false, array('controller' => 'user', 'action' => 'Display'));

        $idField = $object->get_intIdField();

        // retrieve the ID of the object we wish to view
        $id = (int)FormUtil::getPassedValue($idField, isset($args[$idField]) && is_numeric($args[$idField]) ? $args[$idField] : 0, 'GET', FILTER_VALIDATE_INT);
        if (!$id) {
            $id = (int)FormUtil::getPassedValue('id', isset($args['id']) && is_numeric($args['id']) ? $args['id'] : 0, 'GET', FILTER_VALIDATE_INT);
        }

        // check for unique permalinks (without id)
        $hasSlug = false;
        $slugTitle = '';
        if (!$id) {
            $hasSlug = $object->get_intHasUniqueSlug();
            if ($hasSlug) {
                $slugTitle = FormUtil::getPassedValue('title', isset($args['title']) && !empty($args['title']) ? $args['title'] : '', 'GET', FILTER_SANITIZE_STRING);
                $hasSlug = (!empty($slugTitle));
            }
        }

        $this->throwNotFoundUnless(($id || $hasSlug), 'Invalid ' . $idField . ' [' . DataUtil::formatForDisplay($id) . '] received ...');

        // assign object data fetched from the database
        $objectData = null;
        if ($hasSlug) {
            $objectData = $object->selectBySlug($slugTitle);
        } else {
            $objectData = $object->selectById($id);
        }
        if (!is_array($objectData) || !isset($objectData[$idField]) || !is_numeric($objectData[$idField])) {
            $this->throwNotFound($this->__('No such item.'));
        }

        // increase amount of views
        Doctrine::getTable('KnowledgeBase_Model_Ticket')->incrementViews($id);

        // assign the object we loaded above.
        $this->view->assign($objectType, $objectData);

        // fetch and return the appropriate template
        return KnowledgeBase_Util_View::processTemplate($this->view, 'user', $objectType, 'display', $args);
    }

    /**
     * This method provides a generic handling of all edit requests.
     *
     * @params       TODO
     * @param string  $ot           Treated object type.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     * @return mixed Output.
     */
    public function edit($args)
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('KnowledgeBase::', '::', ACCESS_EDIT));
        // DEBUG: permission check aspect ends

        // parameter specifying which type of objects we are treating
        $objectType = FormUtil::getPassedValue('ot', 'ticket', 'GET', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'Edit');
        if (!in_array($objectType, KnowledgeBase_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = KnowledgeBase_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
        }

        // create new Form reference
        $view = FormUtil::newForm('KnowledgeBase', $this);

        // build form handler class name
        $handlerClass = 'KnowledgeBase_Form_Handler_User_' . ucfirst($objectType) . '_Edit';

        // execute form using supplied template and page event handler
        return $view->execute('user/' . $objectType . '/edit.tpl', new $handlerClass());
    }

    /**
     * This is a custom method. Documentation for this will be improved in later versions.
     *
     * @params       TODO
     * @return mixed Output.
     */
    public function assign($args)
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('KnowledgeBase::', '::', ACCESS_OVERVIEW));
        // DEBUG: permission check aspect ends

        // parameter specifying which type of objects we are treating
        $objectType = FormUtil::getPassedValue('ot', 'ticket', 'GET', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'Assign');
        if (!in_array($objectType, KnowledgeBase_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = KnowledgeBase_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
        }
        /** TODO: custom logic */
    }

    /**
     * This method cares for a redirect within an inline frame.
     */
    public function handleInlineRedirect()
    {
        $itemId = (int)FormUtil::getPassedValue('id', 0, 'GET', FILTER_VALIDATE_INT);
        $idPrefix = FormUtil::getPassedValue('idp', '', 'GET', FILTER_SANITIZE_STRING);
        $commandName = FormUtil::getPassedValue('com', '', 'GET', FILTER_SANITIZE_STRING);
        if (empty($idPrefix)) {
            return false;
        }

        $this->view->assign('itemId', $itemId)
                   ->assign('idPrefix', $idPrefix)
                   ->assign('commandName', $commandName)
                   ->assign('jcssConfig', JCSSUtil::getJSConfig())
                   ->display('user/inlineRedirectHandler.tpl');
        return true;
    }
}
