<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger (Guite)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@guite.de>.
 * @link https://guite.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

namespace Guite\KnowledgeBaseModule\Listener\Base;

use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Zikula\Core\CoreEvents;
use Zikula\Core\Event\GenericEvent;

/**
 * Event handler base class for module installer events.
 */
class InstallerListener implements EventSubscriberInterface
{
    /**
     * Listener for the `module.install` event.
     *
     * Called after a module has been successfully installed.
     * Receives `$modinfo` as args.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function moduleInstalled(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `module.upgrade` event.
     *
     * Called after a module has been successfully upgraded.
     * Receives `$modinfo` as args.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function moduleUpgraded(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `module.enable` event.
     *
     * Called after a module has been successfully enabled.
     * Receives `$modinfo` as args.
     */
    public static function moduleEnabled(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `module.disable` event.
     *
     * Called after a module has been successfully disabled.
     * Receives `$modinfo` as args.
     */
    public static function moduleDisabled(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `module.remove` event.
     *
     * Called after a module has been successfully removed.
     * Receives `$modinfo` as args.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function moduleRemoved(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `installer.subscriberarea.uninstalled` event.
     *
     * Called after a hook subscriber area has been unregistered.
     * Receives args['areaid'] as the areaId. Use this to remove orphan data associated with this area.
     *
     * @param GenericEvent $event The event instance.
     */
    public static function subscriberAreaUninstalled(GenericEvent $event)
    {
    }
    
    /**
     * Makes our handlers known to the event system.
     */
    public static function getSubscribedEvents()
    {
        return array(
            CoreEvents::MODULE_INSTALL              => array('moduleInstalled', 5),
            CoreEvents::MODULE_UPGRADE              => array('moduleUpgraded', 5),
            CoreEvents::MODULE_ENABLE               => array('moduleEnabled', 5),
            CoreEvents::MODULE_DISABLE              => array('moduleDisabled', 5),
            CoreEvents::MODULE_REMOVE               => array('moduleRemoved', 5),
            'installer.subscriberarea.uninstalled'  => array('subscriberAreaUninstalled', 5)
        );
    }
}
