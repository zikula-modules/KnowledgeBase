<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @link http://zikula.org
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger.
 * @url https://guite.de
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Jan 27 15:07:46 CET 2011.
 */


/**
 * Business entity collection class for communication with controllers and encapsulating model details.
 *
 * This is the base business class for ticket entities.
 */
abstract class KnowledgeBase_BusinessEntity_Base_TicketCollection/* extends Zikula_Collection_Container*/
{

    /**
     * @var array Reference to list of tickets model (KnowledgeBase_Model_Ticket).
     */
    protected $tickets = array();

    /**
     * @var string The tablename this object maps to.
     */
    protected $_intObjectType = 'kbase_ticket';

    /**
     * @var string The id field for this object.
     */
    protected $_intIdField = 'ticketid';

    /**
     * @var string Optional where clause for selection.
     */
    protected $_intWhere = '';

    /**
     * @var string Optional order clause for selection.
     */
    protected $_intOrderBy = '';

    /**
     * @var string The default sorting field/expression.
     */
    protected $_intDefaultSortingField = 'subject';


    /**
     * Constructor.
     *
     * @param string $where   The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy The order-by clause to use when retrieving the object array (optional) (default='').
     */
    function __construct($where = '', $orderBy = '')
    {
        $this->set_intWhere($where);
        $this->set_intOrderBy($orderBy);
    }

    /**
     * Select object collection from model (e.g. from database).
     *
     * For now we use Doctrine records, but as the controllers communicate only with
     * business entities, we can exchange the model behind it without any subsequent
     * efforts on the controller layer.
     *
     * @param string $where   The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy The order-by clause to use when retrieving the object array (optional) (default='').
     *
     * @return Doctrine_Collection collection containing retrieved Doctrine_Record instances
     */
    public function selectWhere($where = '', $orderBy = '')
    {
        // store parameters
        $this->set_intWhere($where);
        $this->set_intOrderBy($orderBy);

        // select items from the model
        $result = $this->_intTable()->selectCollection($where, $orderBy);

        // store the results
        $this->setTickets($result);

        // and return them
        return $this->getTickets();
    }

    /**
     * Select with a given where clause.
     *
     * @param string $where           The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy         The order-by clause to use when retrieving the object array (optional) (default='').
     * @param integer $currentPage    Where to start selection
     * @param integer $resultsPerPage Amount of items to select
     * @param boolean $asArray        Whether to return the result as array instead as record object (optional) (default=true).
     *
     * @return array|Doctrine_Collection retrieved data array or collection containing retrieved Doctrine_Record instances.
     */
    public function selectWherePaginated($where = '', $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $asArray = true)
    {
        // store parameters
        $this->set_intWhere($where);
        $this->set_intOrderBy($orderBy);

        // select items from the model
        $result = $this->_intTable()->selectWherePaginated($where, $orderBy, $currentPage, $resultsPerPage, $asArray);

        // store the results
        $this->setTickets($result);

        // and return them
        return $this->getTickets();
    }

    /**
     * Select count with a given where clause.
     *
     * @param string $where The where clause to use when retrieving the object count (optional) (default='').
     *
     * @return integer Number of affected records.
     */
    public function selectCount($where = '')
    {
        // store parameters
        $this->set_intWhere($where);

        // get result from the model
        return $this->_intTable()->selectCount($where);
    }

    /**
     * Convenience method to get table managed by record.
     *
     * @return Doctrine_Table Table being managed by the record referenced by this collection.
     */
    private function _intTable()
    {
        return Doctrine_Core::getTable('KnowledgeBase_Model_Ticket');
    }

    /**
     * Retrieves an array with all fields which can be used for sorting instances.
     *
     * @return array
     */
    public function get_intAllowedSortingFields()
    {
        // TODO: to be refactored
        return array(
                     'ticketid',
                     'subject',
                     'content',
                     'views',
                     'ratesUp',
                     'ratesDown'

        );
    }

    /**
     * Get tickets.
     *
     * @return array
     */
    public function getTickets()
    {
        return $this->tickets;
    }

    /**
     * Set tickets.
     *
     * @param array $tickets.
     *
     * @return void
     */
    public function setTickets($pTickets)
    {
        $this->tickets = $pTickets;
    }


    /**
     * Get _int object type.
     *
     * @return string
     */
    public function get_intObjectType()
    {
        return $this->_intObjectType;
    }

    /**
     * Set _int object type.
     *
     * @param string $_intObjectType.
     *
     * @return void
     */
    public function set_intObjectType($p_intObjectType)
    {
        $this->_intObjectType = $p_intObjectType;
    }


    /**
     * Get _int id field.
     *
     * @return string
     */
    public function get_intIdField()
    {
        return $this->_intIdField;
    }

    /**
     * Set _int id field.
     *
     * @param string $_intIdField.
     *
     * @return void
     */
    public function set_intIdField($p_intIdField)
    {
        $this->_intIdField = $p_intIdField;
    }


    /**
     * Get _int where.
     *
     * @return string
     */
    public function get_intWhere()
    {
        return $this->_intWhere;
    }

    /**
     * Set _int where.
     *
     * @param string $_intWhere.
     *
     * @return void
     */
    public function set_intWhere($p_intWhere)
    {
        $this->_intWhere = $p_intWhere;
    }


    /**
     * Get _int order by.
     *
     * @return string
     */
    public function get_intOrderBy()
    {
        return $this->_intOrderBy;
    }

    /**
     * Set _int order by.
     *
     * @param string $_intOrderBy.
     *
     * @return void
     */
    public function set_intOrderBy($p_intOrderBy)
    {
        $this->_intOrderBy = $p_intOrderBy;
    }


    /**
     * Get _int default sorting field.
     *
     * @return string
     */
    public function get_intDefaultSortingField()
    {
        return $this->_intDefaultSortingField;
    }

    /**
     * Set _int default sorting field.
     *
     * @param string $_intDefaultSortingField.
     *
     * @return void
     */
    public function set_intDefaultSortingField($p_intDefaultSortingField)
    {
        $this->_intDefaultSortingField = $p_intDefaultSortingField;
    }



    /**
     * Interceptor being called if an object is used within a string context.
     *
     * @return string
     */
    public function __toString() {
        $string  = 'Instance of the class "KnowledgeBase_BusinessEntity_Base_TicketCollection' . "\n";
        $string .= 'Managed table: ticket' . "\n";
        $string .= 'Entity fields:' . "\n";
        $string .= '        ticketid' . "\n";
        $string .= '        subject' . "\n";
        $string .= '        content' . "\n";
        $string .= '        views' . "\n";
        $string .= '        ratesUp' . "\n";
        $string .= '        ratesDown' . "\n";
        $string .= "\n";

        return $string;
    }
}
