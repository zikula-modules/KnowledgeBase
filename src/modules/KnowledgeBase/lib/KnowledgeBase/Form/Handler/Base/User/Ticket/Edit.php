
<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @link http://zikula.org
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger.
 * @url https://guite.de
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Feb 17 14:43:00 CET 2011.
 */

/**
 * This handler class handles the page events of the Form called by the KnowledgeBase_user_edit() function.
 * It aims on the ticket object type.
 *
 * Member variables in a form handler object are persisted accross different page requests. This means
 * a member variable $this->X can be set on one request and on the next request it will still contain
 * the same value.
 *
 * A form handler will be notified of various events that happens during it's life-cycle.
 * When a specific event occurs then the corresponding event handler (class method) will be executed. Handlers
 * are named exactly like their events - this is how the framework knows which methods to call.
 *
 * The list of events is:
 *
 * - <b>initialize</b>: this event fires before any of the events for the plugins and can be used to setup
 *   the form handler. The event handler typically takes care of reading URL variables, access control
 *   and reading of data from the database.
 *
 * - <b>handleCommand</b>: this event is fired by various plugins on the page. Typically it is done by the
 *   Zikula_Form_Plugin_Button plugin to signal that the user activated a button.
 */
class KnowledgeBase_Form_Handler_Base_User_Ticket_Edit extends Zikula_Form_AbstractHandler
{
    /**
     * Persistent member vars
     */

    // id of ticket
    protected $ticketid;

    // create or edit
    protected $mode;

    // treated object type
    protected $objectType;

    // code for redirect after command handling
    protected $returnTo = null;

    // url of current form with all parameters for multiple creations
    protected $repeatReturnUrl = null;

    // whether this form is being used inline
    protected $inlineUsage = false;

    // full prefix for related items
    protected $idPrefix = '';

    /**
     * Post construction hook.
     *
     * @return mixed
     */
    public function setup()
    {
    }

    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    public function initialize($view)
    {
        $this->inlineUsage = ((UserUtil::getTheme() == 'Printer') ? true : false);
        $this->idPrefix = FormUtil::getPassedValue('idp', '', 'GET', FILTER_SANITIZE_STRING);

        // retrieve the ID of the object we wish to edit
        // default to 0 (which is a numeric id but an invalid value)
        // no provided id means that we want to create a new object
        $this->ticketid = (int)FormUtil::getPassedValue('ticketid', 0, 'GET', FILTER_VALIDATE_INT);
        if (!$this->ticketid) {
            $this->ticketid = (int)FormUtil::getPassedValue('id', 0, 'GET', FILTER_VALIDATE_INT);
        }

        $this->objectType = 'ticket';

        // initialise redirect goal
        $this->returnTo = FormUtil::getPassedValue('returnTo', null, 'GET', FILTER_SANITIZE_STRING);
        // store current uri for repeated creations
        $this->repeatReturnUrl = System::getCurrentURI();

        $objectType = $this->objectType;
        // instantiate a new entity corresponding to $objectType
        $object = KnowledgeBase_Factory::getBusinessEntity($objectType, 'actionHandler', false, array('controller' => 'user', 'action' => 'initialize'));

        $objectData = array();
        $this->mode = 'create';

        // if ticketid is not 0, we wish to edit an existing ticket
        if ($this->ticketid) {
            $this->mode = 'edit';

            if (!SecurityUtil::checkPermission('KnowledgeBase:Ticket:', '::', ACCESS_EDIT)) {
                // set an error message and return false
                return $this->view->registerError(LogUtil::registerPermissionError());
            }

            $idField = 'ticketid';
            // assign object data fetched from the database
            $objectData = $object->selectById($this->ticketid);
            if (!is_array($objectData) || !isset($objectData[$idField]) || !is_numeric($objectData[$idField])) {
                return $view->registerError($this->__('No such item.'));
            }

            // try to guarantee that only one person at a time can be editing this ticket
            $returnUrl = ModUtil::url('KnowledgeBase', 'user', 'display', array('ot' => $this->objectType, 'ticketid' => $this->ticketid));
            ModUtil::apiFunc('PageLock', 'user', 'pageLock',
                array('lockName'  => 'KnowledgeBaseTicket{$this->ticketid}',
                'returnUrl' => $returnUrl));
        } else {
            if (!SecurityUtil::checkPermission('KnowledgeBase:Ticket:', '::', ACCESS_ADD)) {
                return $this->view->registerError(LogUtil::registerPermissionError());
            }

            $templateTicketid = (int)FormUtil::getPassedValue('astemplate', 0, 'GET', FILTER_VALIDATE_INT);
            if ($templateTicketid > 0) {
                // reuse existing ticket
                $idField = 'ticketid';
                // assign object data fetched from the database
                $objectData = $object->selectById($templateTicketid);
                if (!is_array($objectData) || !isset($objectData[$idField]) || !is_numeric($objectData[$idField])) {
                    return $view->registerError($this->__('No such item.'));
                }
                unset($object);
                unset($objectData['ticketid']);
            } else {
                // retrieve array with default data values
                $objectData = $object->getNewArrayWithDefaultData();

            }
        }

        // assign data to template
        $this->view->assign('ticket', $objectData)
            ->assign('mode', $this->mode)
            ->assign('inlineUsage', $this->inlineUsage);

        $this->initializeAdditions();

        // everything okay, no initialization errors occured
        return true;
    }

    /**
     * Method stub for own additions in subclasses.
     */
    protected function initializeAdditions()
    {
    }

    /**
     * Pre-initialise hook.
     *
     * @return void
     */
    public function preInitialize()
    {
    }

    /**
     * Post-initialise hook.
     *
     * @return void
     */
    public function postInitialize()
    {
    }

    /**
     * Get list of allowed redirect codes.
     */
    protected function getRedirectCodes()
    {
        $codes = array();
        // main page of user area
        $codes[] = 'user';
        // user list of tickets
        $codes[] = 'userView';
        // user display page of treated ticket
        $codes[] = 'userDisplay';
        // main page of admin area
        $codes[] = 'admin';
        return $codes;
    }

    /**
     * Get the default redirect url. Required if no returnTo parameter has been supplied.
     * This method is called in handleCommand so we know which command has been performed.
     */
    protected function getDefaultReturnUrl($args, $obj)
    {
        // redirect to the list of tickets
        $viewArgs = array('ot' => $this->objectType);
        $url = ModUtil::url('KnowledgeBase', 'user', 'view', $viewArgs);

        if ($args['commandName'] != 'delete') {
            // redirect to the detail page of treated ticket
            $url = ModUtil::url('KnowledgeBase', 'user', 'display',
                array('ot'       => $this->objectType,
                'ticketid' => $this->ticketid));
        }
        return $url;
    }

    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Zikula_Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     * @see Zikula_Form_Plugin_Button
     * @see Zikula_Form_Plugin_ImageButton
     */
    public function handleCommand($view, &$args)
    {
        if ($args['commandName'] == 'delete') {
            if (!SecurityUtil::checkPermission('KnowledgeBase:Ticket:', '::', ACCESS_DELETE)) {
                return $this->view->registerError(LogUtil::registerPermissionError());
            }
        }

        if ($args['commandName'] != 'delete' && $args['commandName'] != 'cancel') {
            // do forms validation including checking all validators on the page to validate their input
            if (!$this->view->isValid()) {
                return false;
            }
        }

        $this->objectType = 'ticket';

        $objectType = $this->objectType;
        // instantiate a new entity corresponding to $objectType
        $object = KnowledgeBase_Factory::getBusinessEntity($objectType, 'actionHandler', false, array('controller' => 'user', 'action' => 'handleCommand'));

        $ticket = null;
        if ($args['commandName'] != 'create') {
            $object->selectById($this->ticketid, false);
        }
        $ticket = $object;

        // fetch posted data input values as an associative array
        $formData = $this->view->getValues();
        // we want the array with our field values
        $formData = $formData['ticket'];

        $repeatCreateAction = false;
        if ($args['commandName'] == 'create' && isset($formData['repeatcreation'])) {
            $repeatCreateAction = $formData['repeatcreation'];
            unset($formData['repeatcreation']);
        }

        // assign fetched data
        $ticket->merge($formData);

        if ($args['commandName'] == 'create') {
            // event handling if user clicks on create

            // Let any hooks perform additional validation actions
            $validators = $this->notifyHooks(new Zikula_ValidationHook('knowledgebase.hook.tickets.validate.edit', new Zikula_Hook_ValidationProviders))->getValidators();
            // TODO: validation incomplete

            // save ticket
            $ticket->save();

            // store new id
            $this->ticketid = $ticket->get_intId();
            // check if the insert has worked, might become obsolete due to exception usage
            if ($this->ticketid === false) {
                return LogUtil::registerError($this->__('Error! Creation attempt failed.'));
            }

            $this->updateRelationLinks($ticket);

            LogUtil::registerStatus($this->__('Done! Ticket created.'));

            // Let any hooks know that we have created an item
            $url = new Zikula_ModUrl('KnowledgeBase', 'user', 'view', ZLanguage::getLanguageCode(), array('id' => $this->ticketid));
            $this->notifyHooks(new Zikula_ProcessHook('knowledgebase.hook.tickets.process.edit', $this->ticketid, $url));
        } else if ($args['commandName'] == 'update') {
            // event handling if user clicks on update

            // Let any hooks perform additional validation actions
            $this->notifyHooks(new Zikula_ValidationHook('knowledgebase.hook.tickets.validate.edit', new Zikula_Hook_ValidationProviders))->getValidators();
            // TODO validation incomplete

            // save ticket
            $updateResult = $ticket->save();
            // check if the update has worked, might become obsolete due to exception usage
            if ($updateResult === false) {
                return LogUtil::registerError($this->__('Error! Update attempt failed.'));
            }

            $this->updateRelationLinks($ticket);

            LogUtil::registerStatus($this->__('Done! Ticket updated.'));

            // Let any hooks know that we have updated an item
            $url = new Zikula_ModUrl('KnowledgeBase', 'user', 'view', ZLanguage::getLanguageCode(), array('id' => $this->ticketid));
            $this->notifyHooks(new Zikula_ProcessHook('knowledgebase.hook.tickets.process.edit', $this->ticketid, $url));
        } else if ($args['commandName'] == 'delete') {
            // event handling if user clicks on delete

            // Let any hooks perform additional validation actions
            $this->notifyHooks(new Zikula_ProcessHook('knowledgebase.hook.tickets.validate.delete', $this->ticketid));

            // delete ticket
            if ($ticket->delete() === false) {
                return LogUtil::registerError($this->__('Error! Deletion attempt failed.'));
            }

            LogUtil::registerStatus($this->__('Done! Ticket deleted.'));

            // Let any hooks know that we have deleted an item
            $this->notifyHooks(new Zikula_ProcessHook('knowledgebase.hook.tickets.process.delete', $this->ticketid));
        } else if ($args['commandName'] == 'cancel') {
            // event handling if user clicks on cancel
            }

        if ($args['commandName'] != 'cancel') {
            // clear view cache to reflect our changes
            $this->view->clear_cache();
        }

        if ($this->mode == 'edit') {
            ModUtil::apiFunc('PageLock', 'user', 'releaseLock',
                array('lockName' => 'KnowledgeBaseTicket{$this->ticketid}'));
        }

        return $this->view->redirect($this->getRedirectUrl($args, $ticket, $repeatCreateAction));

        // We should in principle not end here at all, since the above command handlers should
        // match all possible commands, but we return "ok" (true) for all cases.
        // You could also return $this->view->setErrorMsg('Unexpected command')
        return true;
    }

    /**
     * Get url to redirect to.
     */
    protected function getRedirectUrl($args, $obj, $repeatCreateAction = false)
    {
        if ($this->inlineUsage == true) {
            // inline usage, return to special function for closing the Zikula.UI.Window instance
            return ModUtil::url('KnowledgeBase', 'user', 'handleInlineRedirect',
                array('idp' => $this->idPrefix,
                'id'  => $this->ticketid,
                'com' => $args['commandName']));
        }

        if ($repeatCreateAction) {
            return $this->repeatReturnUrl;
        }

        // normal usage, compute return url from given redirect code
        if (!in_array($this->returnTo, $this->getRedirectCodes())) {
            // invalid return code, so return the default url
            return $this->getDefaultReturnUrl($args, $obj);
        }

        // parse given redirect code and return corresponding url
        switch ($this->returnTo) {
            case 'user':
                return ModUtil::url('KnowledgeBase', 'user');
            case 'userView':
                return ModUtil::url('KnowledgeBase', 'user', 'view',
                    array('ot' => $this->objectType));
            case 'userDisplay':
                if ($args['commandName'] != 'delete') {
                    return ModUtil::url('KnowledgeBase', 'user', 'display',
                        array('ot'       => $this->objectType,
                        'ticketid' => $this->ticketid));
                }
                return $this->getDefaultReturnUrl($args, $obj);
            case 'admin':
                return ModUtil::url('KnowledgeBase', 'admin');
            default:
                return $this->getDefaultReturnUrl($args, $obj);
        }
    }

    /**
     * Select a related object in create mode.
     *
     * @return array Single result or list of results.
     */
    protected function retrieveRelatedObjects($objectType, $relationInputFieldName, $many = false, $source = 'GET')
    {
        $idField = strtolower($objectType) . 'id';
        $objectCollection = KnowledgeBase_Factory::getBusinessCollection($objectType, 'controllerAction', array('controller' => 'user', 'action' => 'edit'));
        $where = '';
        $sortParam = $objectCollection->get_intDefaultSortingField() . ' asc';
        if ($many) {
            $inputValue = FormUtil::getPassedValue($relationInputFieldName, '', $source);
            if (empty($inputValue)) {
                return array();
            }

            $where = $idField . ' IN (' . DataUtil::formatForStore($inputValue) . ')';
        } else {
            $inputValue = (int)FormUtil::getPassedValue($relationInputFieldName, 0, $source, FILTER_VALIDATE_INT);
            if ($inputValue == 0) {
                return array();
            }

            $where = $idField . ' = \'' . DataUtil::formatForStore($inputValue) . '\'';
        }
        $result = $objectCollection->selectWherePaginated($where, $sortParam, 1, 50);
        return (($many) ? $result : $result[0]);
    }

    /**
     * Helper method for updating links to related records.
     */
    protected function updateRelationLinks($businessEntity)
    {
    }

}
