<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger <info@guite.de>.
 * @link https://guite.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Wed Jan 04 20:13:48 CET 2012.
 */

/**
 * Mailz api implementation class
 */
class KnowledgeBase_Api_Search extends Zikula_AbstractApi
{
    public function info()
    {
        return array('title'     => 'KnowledgeBase',
                     'functions' => array('KnowledgeBase' => 'search'));
    }

    /**
     * Search form component.
     *
     * @author       Axel Guckelsberger
     * @params       TODO
     * @return       Render output
     */
    public function options($args)
    {
    // DEBUG: permission check aspect starts
        if (!SecurityUtil::checkPermission('KnowledgeBase::', '::', ACCESS_READ)) {
            return '';
        }
    // DEBUG: permission check aspect ends

        $view = Zikula_View::getInstance('KnowledgeBase');
        $view->assign('active', (isset($args['active']) && isset($args['active']['KnowledgeBase'])) || !isset($args['active']));
        return $view->fetch('knowledgebase_search_options.tpl');
    }

    /**
     * This is a custom function. Documentation for this will be improved in later versions.
     *
     * @author       Axel Guckelsberger
     * @params       TODO
     * @return       Render output
     */
    public function search($args)
    {
    // DEBUG: permission check aspect starts
        if (!SecurityUtil::checkPermission('KnowledgeBase::', '::', ACCESS_READ)) {
            return true;
        }
    // DEBUG: permission check aspect ends

        $dom = ZLanguage::getModuleDomain('KnowledgeBase');

        ModUtil::dbInfoLoad('Search');
        $tables       = DBUtil::getTables();
        $kbasetable   = $tables['kbase_ticket'];
        $kbasecolumn  = $tables['kbase_ticket_column'];
        $searchTable  = $tables['search_result'];
        $searchColumn = $tables['search_result_column'];

        $where = search_construct_where($args,
                                        array($kbasecolumn['subject'],
                                              $kbasecolumn['content']));

        // further exlusions
        //$where .= ' AND ...';

        $sql = 'SELECT ' . $kbasecolumn['id'] . ' AS id, '
                         . $kbasecolumn['createdDate'] . ' AS createdDate, '
                         . $kbasecolumn['subject'] . ' AS subject, '
                         . $kbasecolumn['content'] . ' AS content'
            . ' FROM ' . $kbasetable . ' WHERE ' . $where;

        $result = DBUtil::executeSQL($sql);
        if (!$result) {
            return LogUtil::registerError (__('Error! Could not load items.', $dom));
        }

        $sessionId = session_id();

        $insertSql = 'INSERT INTO ' . $searchTable . '('
                    . $searchColumn['title'] . ','
                    . $searchColumn['text'] . ','
                    . $searchColumn['extra'] . ','
                    . $searchColumn['module'] . ','
                    . $searchColumn['created'] . ','
                    . $searchColumn['session']
                    . ') VALUES ';

        // Process the result set and insert into search result table
        for (; !$result->EOF; $result->MoveNext()) {
            $kbaseItem = $result->GetRowAssoc(2);

            $sql = $insertSql . '('
                    . '\'' . DataUtil::formatForStore($kbaseItem['subject']) . '\', '
                    . '\'' . DataUtil::formatForStore($kbaseItem['content']) . '\', '
                    . '\'' . DataUtil::formatForStore(ModUtil::url('KnowledgeBase', 'user', 'display', array('id' => $kbaseItem['id']))) . '\', '
                    . '\'' . 'KnowledgeBase' . '\', '
                    . '\'' . DataUtil::formatForStore($kbaseItem['createdDate']) . '\', '
                    . '\'' . DataUtil::formatForStore($sessionId) . '\')';

            $insertResult = DBUtil::executeSQL($sql);
            if (!$insertResult) {
                return LogUtil::registerError (__('Error! Could not load items.', $dom));
            }
        }

        return true;
    }

    /**
     * This is a custom function. Documentation for this will be improved in later versions.
     *
     * @author       Axel Guckelsberger
     * @params       TODO
     * @return       Render output
     */
    public function search_check($args)
    {
        $datarow = &$args['datarow'];

        $datarow['url'] = $datarow['extra'];

        return true;
    }
}
