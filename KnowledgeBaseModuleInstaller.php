<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger (Guite)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@guite.de>.
 * @link https://guite.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

namespace Guite\KnowledgeBaseModule;

use Guite\KnowledgeBaseModule\Base\KnowledgeBaseModuleInstaller as BaseKnowledgeBaseModuleInstaller;

use Zikula\Module\CategoriesModule\Entity\CategoryEntity;
use Zikula\Module\CategoriesModule\Entity\CategoryRegistryEntity;

/**
 * Installer implementation class.
 */
class KnowledgeBaseModuleInstaller extends BaseKnowledgeBaseModuleInstaller
{
    /**
     * Install the KnowledgeBase application.
     *
     * @return boolean True on success, or false.
     */
    public function install()
    {
        $result = parent::install();

        // create the default categories for KnowledgeBase
        if (!$this->createDefaultCategories()) {
            return LogUtil::registerError(__('creation of default categories failed', $dom));
        }

        return true;
    }

    /**
     * create the default categories for KnowledgeBase
     *
     * @author       Axel Guckelsberger
     * @return       bool       true if successful or false if something went wrong
     */
    private function createDefaultCategories()
    {
        // determine last category
        $dql = 'SELECT c
                FROM Zikula\Module\CategoriesModule\Entity\CategoryEntity c
                ORDER BY id DESC';
        $query = $em->createQuery($dql);
        $query->setFirstResult(0)
              ->setMaxResults(1);
        $categories = $query->getResult();
        if (!count($categories)) {
            return false;
        }

        $lastCat = $categories[0];
        if ($lastCat === false || !$lastCat) {
            return false;
        }

        $nextCatID = $lastCat['id'] + 1;

        $objArray = array();

        $parentList = array();
        $rootCat = array();
        $parentLvlOne = array();
        $parentLvlTwo = array();


        $catNames = array('en' => 'Knowledge Base',
                          'de' => 'Knowledge Base');
        $catDescriptions = array('en' => 'Main category for the Knowledge Base',
                                 'de' => 'Hauptkategorie für die Knowledge Base');
        $rootCat = $this->createSingleCategory($nextCatID++, $parentList, $catNames, $catDescriptions, $objArray);

        $parentList = array($rootCat);                  // reset to level one
        $catNames = array('en' => 'Ticket Categories',
                          'de' => 'Ticket-Kategorien');
        $catDescriptions = array('en' => 'Available topics for tickets',
                                 'de' => 'Verfügbare Themen für Tickets');
        $parentLvlOne = $this->createSingleCategory($nextCatID++, $parentList, $catNames, $catDescriptions, $objArray);

        $parentList = array($rootCat, $parentLvlOne);   // reset to level two
        {
            $catNames = array('en' => 'Installation',
                              'de' => 'Installation');
            $catDescriptions = array('eng' => 'Installation of Zikula',
                                     'deu' => 'Installation von Zikula');
            $parentLvlTwo = $this->createSingleCategory($nextCatID++, $parentList, $catNames, $catDescriptions, $objArray);

            $catNames = array('en' => 'Configuration',
                              'de' => 'Konfiguration');
            $catDescriptions = array('eng' => 'Configure Zikula and basic settings',
                                     'deu' => 'Zikula konfigurieren und Grundeinstellungen');
            $parentLvlTwo = $this->createSingleCategory($nextCatID++, $parentList, $catNames, $catDescriptions, $objArray);

            $catNames = array('en' => 'Modules',
                              'de' => 'Module');
            $catDescriptions = array('eng' => 'Setup, manage and use modules',
                                     'deu' => 'Module einrichten, verwalten und verwenden');
            $parentLvlTwo = $this->createSingleCategory($nextCatID++, $parentList, $catNames, $catDescriptions, $objArray);

            $catNames = array('en' => 'Themes',
                              'de' => 'Themes');
            $catDescriptions = array('eng' => 'Design your layout in Zikula',
                                     'deu' => 'Realisiere Dein Design mit Zikula');
            $parentLvlTwo = $this->createSingleCategory($nextCatID++, $parentList, $catNames, $catDescriptions, $objArray);

            $catNames = array('en' => 'Customisation',
                              'de' => 'Anpassung');
            $catDescriptions = array('eng' => 'Your individual Zikula',
                                     'deu' => 'Individualisierung von Zikula');
            $parentLvlTwo = $this->createSingleCategory($nextCatID++, $parentList, $catNames, $catDescriptions, $objArray);

            $catNames = array('en' => 'Development',
                              'de' => 'Entwicklung');
            $catDescriptions = array('eng' => 'Development of and for Zikula',
                                     'deu' => 'Entwicklung von und für Zikula');
            $parentLvlTwo = $this->createSingleCategory($nextCatID++, $parentList, $catNames, $catDescriptions, $objArray);

            $catNames = array('en' => 'Tools and Services',
                              'de' => 'Nützliche Werkzeuge');
            $catDescriptions = array('eng' => 'CoZi, extension database and further tools',
                                     'deu' => 'CoZi, Extension-Datenbank und andere Tools');
            $parentLvlTwo = $this->createSingleCategory($nextCatID++, $parentList, $catNames, $catDescriptions, $objArray);
        }


        // rebuild all path entries so that we can use them below
        CategoryUtil::rebuildPaths('path', 'name');
        CategoryUtil::rebuildPaths('ipath', 'id');

        // define category registration mappings to ticket table
        $mappingRootCats = array(
            array('prop' => 'TicketCategoryMain', 'rootPath' => '/__SYSTEM__/Knowledge Base/Ticket Categories')
        );

        foreach ($mappingRootCats as $mappingRoot) {
            $rootCat = CategoryUtil::getCategoryByPath($mappingRoot['rootPath']);

            $registry = new CategoryRegistryEntity();
            $registry->setModname('GuiteKnowledgeBaseModule');
            $registry->setEntityname('kbase_ticket');
            $registry->setProperty($mappingRoot['prop']);
            $registry->setCategory_Id($rootCat['id']);
            $this->entityManager->persist($registry);

            $this->setVar('baseCat' . $mappingRoot['prop'], $mappingRoot['rootPath']);
        }

        // now send everything to the database
        $this->entityManager->flush();

        return true;
    }

    private function createSingleCategory($catID, $parentArray, $catNames, $catDescriptions, &$destArray)
    {
        $path = '/__SYSTEM__/Knowledge Base';
        $ipath = '';
        $numParents = count($parentArray);
        if ($numParents > 0) {
            foreach($parentArray as $parentCat) {
                $path .= '/' . $parentCat['name'];
                $ipath = '/' . $parentCat['id'];
            }
        }

        $ipath .= '/' . $catID;

        $category = new CategoryEntity();
        $category->setId($catID);
        if ($numParents > 0) {
            $category->setParent($parentArray[$numParents-1]);
        }
        $category->setName($catNames['en']);
        $category->setDisplay_name(serialize($catNames));
        $category->setDisplay_desc(serialize($catDescriptions));
        $category->setPath($path);
        $category->setIPath($ipath);

        $this->entityManager->persist($category);

        $destArray[] = $category;

        return $category;
    }
}
