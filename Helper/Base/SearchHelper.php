<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger (Guite)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@guite.de>.
 * @link https://guite.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

namespace Guite\KnowledgeBaseModule\Helper\Base;

use Guite\KnowledgeBaseModule\Util\ControllerUtil;

use ModUtil;
use SecurityUtil;
use ServiceUtil;
use ZLanguage;

use Zikula\Core\ModUrl;
use Zikula\Module\SearchModule\AbstractSearchable;

/**
 * Search helper base class.
 */
class SearchHelper extends AbstractSearchable
{
    /**
     * Display the search form.
     *
     * @param boolean    $active
     * @param array|null $modVars
     *
     * @return string Template output
     */
    public function getOptions($active, $modVars = null)
    {
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_READ)) {
            return '';
        }
    
        $this->view->assign('active_ticket', (!isset($args['active_ticket']) || isset($args['active']['active_ticket'])));
    
        return $this->view->fetch('Search/options.tpl');
    }
    
    /**
     * Returns the search results.
     *
     * @param array      $words      Array of words to search for
     * @param string     $searchType AND|OR|EXACT (defaults to AND)
     * @param array|null $modVars    Module form vars passed though
     *
     * @return array List of fetched results.
     */
    public function getResults(array $words, $searchType = 'AND', $modVars = null)
    {
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_READ)) {
            return array();
        }
    
        // save session id as it is used when inserting search results below
        $sessionId  = session_id();
    
        // save current language
        $languageCode = ZLanguage::getLanguageCode();
    
        // initialise array for results
        $records = array();
    
        // retrieve list of activated object types
        $searchTypes = isset($modVars['objectTypes']) ? (array)$modVars['objectTypes'] : array();
    
        $controllerHelper = new ControllerUtil(ServiceUtil::getManager(), ModUtil::getModule($this->name));
        $utilArgs = array('helper' => 'search', 'action' => 'getResults');
        $allowedTypes = $controllerHelper->getObjectTypes('helper', $utilArgs);
    
        foreach ($searchTypes as $objectType) {
            if (!in_array($objectType, $allowedTypes)) {
                continue;
            }
    
            $whereArray = array();
            $languageField = null;
            switch ($objectType) {
                case 'ticket':
                    $whereArray[] = 'tbl.workflowState';
                    $whereArray[] = 'tbl.subject';
                    $whereArray[] = 'tbl.content';
                    break;
            }
    
            $entityClass = 'GuiteKnowledgeBaseModule:' . ucwords($objectType) . 'Entity';
            $repository = $this->entityManager->getRepository($entityClass);
    
            // build the search query without any joins
            $qb = $repository->genericBaseQuery('', '', false);
    
            // build where expression for given search type
            $whereExpr = $this->formatWhere($qb, $words, $whereArray, $searchType);
            $qb->andWhere($whereExpr);
    
            $query = $qb->getQuery();
    
            // set a sensitive limit
            $query->setFirstResult(0)
                  ->setMaxResults(250);
    
            // fetch the results
            $entities = $query->getResult();
    
            if (count($entities) == 0) {
                continue;
            }
    
            $idFields = ModUtil::apiFunc($this->name, 'selection', 'getIdFields', array('ot' => $objectType));
            $descriptionField = $repository->getDescriptionFieldName();
    
            foreach ($entities as $entity) {
                $urlArgs = array('ot' => $objectType);
                // create identifier for permission check
                $instanceId = '';
                foreach ($idFields as $idField) {
                    $urlArgs[$idField] = $entity[$idField];
                    if (!empty($instanceId)) {
                        $instanceId .= '_';
                    }
                    $instanceId .= $entity[$idField];
                }
                $urlArgs['id'] = $instanceId;
                if (isset($entity['slug'])) {
                    $urlArgs['slug'] = $entity['slug'];
                }
    
                // perform permission check
                if (!SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', $instanceId . '::', ACCESS_OVERVIEW)) {
                    continue;
                }
    
                $description = !empty($descriptionField) ? $entity[$descriptionField] : '';
                $created = isset($entity['createdDate']) ? $entity['createdDate'] : null;
    
                // override language if required
                if ($languageField != null) {
                    $languageCode = $entity[$languageField];
                }
    
                $records[] = array(
                    'title' => $entity->getTitleFromDisplayPattern(),
                    'text' => $description,
                    'module' => $this->name,
                    'sesid' => $sessionId,
                    'created' => $created,
                    'url' => new ModUrl($this->name, 'user', 'display', $languageCode, $urlArgs)
                );
            }
        }
    
        return $records;
    }
}
