<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @link http://zikula.org
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger.
 * @url https://guite.de
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Feb 17 14:43:00 CET 2011.
 */

/**
 * Business entity class for communication with controllers and encapsulating model details.
 *
 * This is the base business class for ticket entities.
 */
abstract class KnowledgeBase_BusinessEntity_Base_Ticket
{

    /**
     * @var array  Reference to treated ticket model (KnowledgeBase_Model_Ticket)
     */
    protected $ticket = null;

    /**
     * @var string The tablename this object maps to
     */
    protected $_intObjectType = 'kbase_ticket';

    /**
     * @var string The id field for this object
     */
    protected $_intIdField = 'ticketid';

    /**
     * @var integer The id for this object
     */
    protected $_intId = 0;

    /**
     * @var KnowledgeBase_BusinessEntity_TicketValidator The validator for this entity
     */
    protected $_intValidator = null;

    /**
     * @var boolean Whether this entity supports unique slugs
     */
    protected $_intHasUniqueSlug = false;

    /**
     * @var integer $ticketid.
     */
    protected $ticketid;

    /**
     * @var string $subject.
     */
    protected $subject;

    /**
     * @var string $content.
     */
    protected $content;

    /**
     * @var integer $views.
     */
    protected $views;

    /**
     * @var integer $ratesUp.
     */
    protected $ratesUp;

    /**
     * @var integer $ratesDown.
     */
    protected $ratesDown;

    /**
     * Constructor.
     *
     * @param integer $id The id to use to retrieve the object (optional) (default=null).
     */
    public function __construct($id = 0)
    {
        $this->_intObjectType = 'kbase_ticket';
        $this->_intIdField = 'ticketid';
        $this->_intId = $id;
        $this->_intValidator = new KnowledgeBase_BusinessEntity_TicketValidator($this);
        $this->_intHasUniqueSlug = true;
    }

    /**
     * Select object from model (e.g. from database).
     * For now we use Doctrine records, but as the controllers communicate only with
     * business entities, we can exchange the model behind it without any subsequent
     * efforts on the controller layer.
     *
     * @param integer $id      The id to use to retrieve the object (optional) (default=null).
     * @param boolean $asArray Whether to return the result as array instead as record object (optional) (default=true).
     *
     * @return array|Doctrine_Record Retrieved data array or Doctrine_Record instance.
     */
    public function selectById($id = 0, $asArray = true)
    {
        // check id parameter
        if ($id == 0 && $this->_intId == 0) {
            return LogUtil::registerArgsError();
        }
        // store id parameter
        if ($id > 0) {
            $this->_intId = $id;
        }

        // get reference to table
        $table = Doctrine_Core::getTable('KnowledgeBase_Model_Ticket');

        // get result from the model
        $item = $table->selectOneItemById($id, $asArray);

        // look whether we fetched an object or an array
        if (!$asArray) {
            // store the result object
            $this->setTicket($item);
        }

        // return the results
        return $item;
    }

    /**
     * Select object by unique slug value.
     *
     * @param string  $slugTitle The slug value.
     * @param boolean $asArray   Whether to return the result as array instead as record object (optional) (default=true).
     *
     * @return array|Doctrine_Record retrieved data array or Doctrine_Record instance.
     */
    public function selectBySlug($slugTitle = '', $asArray = true)
    {
        // check input parameter
        if ($slugTitle == '') {
            return LogUtil::registerArgsError();
        }

        // get reference to table
        $table = Doctrine_Core::getTable('KnowledgeBase_Model_Ticket');

        // get result from the model
        $item = $table->selectOneItemBySlug($slugTitle, $asArray);

        // look whether we fetched an object or an array
        if (!$asArray) {
            // store the result object
            $this->setTicket($item);
            $this->_intId = $item->ticketid;
        } else {
            $this->_intId = $item['ticketid'];
        }

        // return the results
        return $item;
    }

    /**
     * Convenience merge method delegating to treated KnowledgeBase_Model_Ticket instance
     *
     * @param array data fields.
     */
    public function merge(array $data)
    {
        return $this->getTicket()->merge($data);
    }

    /**
     * Convenience save method delegating to treated KnowledgeBase_Model_Ticket instance.
     */
    public function save()
    {
        $result = $this->getTicket()->save();
        $this->set_intId($this->ticket[$this->_intIdField]);
        return $result;
    }

    /**
     * Convenience delete method delegating to treated KnowledgeBase_Model_Ticket instance.
     */
    public function delete()
    {
        $result = $this->getTicket()->delete();
        $this->set_intId(0);
        $this->ticket = null;
        return $result;
    }

    /**
     * Helper method for assigning default data values.
     *
     * @return array
     */
    public function getNewArrayWithDefaultData()
    {

        $objectData = Array(
            'subject'   => '',
            'content'   => '',
            'views'     => 0,
            'ratesUp'   => 0,
            'ratesDown' => 0);

        return $objectData;
    }

    /**
     * Get ticket
     *
     * @return KnowledgeBase_Model_Ticket
     */
    public function getTicket()
    {
        if (is_null($this->ticket)) {
            $this->setTicket(new KnowledgeBase_Model_Ticket());
        }
        return $this->ticket;
    }

    /**
     * Set ticket.
     *
     * @param KnowledgeBase_Model_Ticket $ticket.
     *
     * @return void
     */
    public function setTicket($pTicket)
    {
        $this->ticket = $pTicket;
    }

    /**
     * Get _int object type.
     *
     * @return string
     */
    public function get_intObjectType()
    {
        return $this->_intObjectType;
    }

    /**
     * Set _int object type.
     *
     * @param string $_intObjectType.
     *
     * @return void
     */
    public function set_intObjectType($p_intObjectType)
    {
        $this->_intObjectType = $p_intObjectType;
    }

    /**
     * Get _int id field.
     *
     * @return string
     */
    public function get_intIdField()
    {
        return $this->_intIdField;
    }

    /**
     * Set _int id field.
     *
     * @param string $_intIdField.
     *
     * @return void
     */
    public function set_intIdField($p_intIdField)
    {
        $this->_intIdField = $p_intIdField;
    }

    /**
     * Get _int id.
     *
     * @return integer
     */
    public function get_intId()
    {
        return $this->_intId;
    }

    /**
     * Set _int id.
     *
     * @param integer $_intId.
     *
     * @return void
     */
    public function set_intId($p_intId)
    {
        $this->_intId = $p_intId;
    }

    /**
     * Get _int validator.
     *
     * @return KnowledgeBase_BusinessEntity_TicketValidator
     */
    public function get_intValidator()
    {
        return $this->_intValidator;
    }

    /**
     * Set _int validator.
     *
     * @param KnowledgeBase_BusinessEntity_TicketValidator $_intValidator.
     *
     * @return void
     */
    public function set_intValidator($p_intValidator)
    {
        $this->_intValidator = $p_intValidator;
    }

    /**
     * Get _int has unique slug.
     *
     * @return boolean
     */
    public function get_intHasUniqueSlug()
    {
        return $this->_intHasUniqueSlug;
    }

    /**
     * Set _int has unique slug.
     *
     * @param boolean $_intHasUniqueSlug.
     *
     * @return void
     */
    public function set_intHasUniqueSlug($p_intHasUniqueSlug)
    {
        $this->_intHasUniqueSlug = $p_intHasUniqueSlug;
    }

    /**
     * Get ticketid.
     *
     * @return integer
     */
    public function getTicketid()
    {
        if (!is_null($this->ticket) && ($this->ticketid == null || !$this->ticketid)) {
            $this->ticketid = $this->ticket['ticketid'];
        }
        return $this->ticketid;
    }

    /**
     * Set ticketid.
     *
     * @param integer $ticketid.
     *
     * @return void
     */
    public function setTicketid($pTicketid)
    {
        $this->ticketid = $pTicketid;
        if (!is_null($this->ticket)) {
            $this->ticket['ticketid'] = $this->ticketid;
        }
    }

    /**
     * Get subject.
     *
     * @return string
     */
    public function getSubject()
    {
        if (!is_null($this->ticket) && ($this->subject == null || !$this->subject)) {
            $this->subject = $this->ticket['subject'];
        }
        return $this->subject;
    }

    /**
     * Set subject.
     *
     * @param string $subject.
     *
     * @return void
     */
    public function setSubject($pSubject)
    {
        $this->subject = $pSubject;
        if (!is_null($this->ticket)) {
            $this->ticket['subject'] = $this->subject;
        }
    }

    /**
     * Get content.
     *
     * @return string
     */
    public function getContent()
    {
        if (!is_null($this->ticket) && ($this->content == null || !$this->content)) {
            $this->content = $this->ticket['content'];
        }
        return $this->content;
    }

    /**
     * Set content.
     *
     * @param string $content.
     *
     * @return void
     */
    public function setContent($pContent)
    {
        $this->content = $pContent;
        if (!is_null($this->ticket)) {
            $this->ticket['content'] = $this->content;
        }
    }

    /**
     * Get views.
     *
     * @return integer
     */
    public function getViews()
    {
        if (!is_null($this->ticket) && ($this->views == null || !$this->views)) {
            $this->views = $this->ticket['views'];
        }
        return $this->views;
    }

    /**
     * Set views.
     *
     * @param integer $views.
     *
     * @return void
     */
    public function setViews($pViews)
    {
        $this->views = $pViews;
        if (!is_null($this->ticket)) {
            $this->ticket['views'] = $this->views;
        }
    }

    /**
     * Get rates up.
     *
     * @return integer
     */
    public function getRatesUp()
    {
        if (!is_null($this->ticket) && ($this->ratesUp == null || !$this->ratesUp)) {
            $this->ratesUp = $this->ticket['ratesUp'];
        }
        return $this->ratesUp;
    }

    /**
     * Set rates up.
     *
     * @param integer $ratesUp.
     *
     * @return void
     */
    public function setRatesUp($pRatesUp)
    {
        $this->ratesUp = $pRatesUp;
        if (!is_null($this->ticket)) {
            $this->ticket['ratesUp'] = $this->ratesUp;
        }
    }

    /**
     * Get rates down.
     *
     * @return integer
     */
    public function getRatesDown()
    {
        if (!is_null($this->ticket) && ($this->ratesDown == null || !$this->ratesDown)) {
            $this->ratesDown = $this->ticket['ratesDown'];
        }
        return $this->ratesDown;
    }

    /**
     * Set rates down.
     *
     * @param integer $ratesDown.
     *
     * @return void
     */
    public function setRatesDown($pRatesDown)
    {
        $this->ratesDown = $pRatesDown;
        if (!is_null($this->ticket)) {
            $this->ticket['ratesDown'] = $this->ratesDown;
        }
    }

    /**
     * Interceptor being called if an object is used within a string context.
     *
     * @return string
     */
    public function __toString()
    {
        $string = 'Instance of the class "KnowledgeBase_BusinessEntity_Base_Ticket' . "\n";
        $string .= 'Managed table: ticket' . "\n";
        $string .= 'Entity fields:' . "\n";
        $string .= '        ticketid' . "\n";
        $string .= '        subject' . "\n";
        $string .= '        content' . "\n";
        $string .= '        views' . "\n";
        $string .= '        ratesUp' . "\n";
        $string .= '        ratesDown' . "\n";
        $string .= "\n";

        return $string;
    }
}
