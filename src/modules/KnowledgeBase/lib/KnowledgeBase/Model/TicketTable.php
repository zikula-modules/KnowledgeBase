<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @link http://zikula.org
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger.
 * @url https://guite.de
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Jan 27 15:07:46 CET 2011.
 */


/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the concrete table class for ticket entities.
 */
class KnowledgeBase_Model_TicketTable extends KnowledgeBase_Model_Base_TicketTable
{
    public function incrementViews($id = 0)
    {
        if ($id == 0 || !is_numeric($id)) {
            return false;
        }

        $q = Doctrine_Query::create()
            ->update('KnowledgeBase_Model_Ticket')
            ->set('views', 'views + 1')
            ->where('ticketid = ?', $id);
        $q->execute();
    }

    public function incrementRatesUp($id = 0)
    {
        if ($id == 0 || !is_numeric($id)) {
            return false;
        }

        $q = Doctrine_Query::create()
            ->update('KnowledgeBase_Model_Ticket')
            ->set('ratesUp', 'ratesUp + 1')
            ->where('ticketid = ?', $id);
        $q->execute();
    }

    public function incrementRatesDown($id = 0)
    {
        if ($id == 0 || !is_numeric($id)) {
            return false;
        }

        $q = Doctrine_Query::create()
            ->update('KnowledgeBase_Model_Ticket')
            ->set('ratesDown', 'ratesDown + 1')
            ->where('ticketid = ?', $id);
        $q->execute();
    }

    /**
     * Build a generic Doctrine query supporting WHERE and ORDER BY
     *
     * @param string $where             The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy           The order-by clause to use when retrieving the object array (optional) (default='').
     * @param boolean $useJoins         Whether to include joining related objects (optional) (default=true).
     * @return Doctrine_Query query instance to be further processed
     */
    private function _intBaseQuery($where = '', $orderBy = '', $useJoins = true)
    {
        $selection = 'tbl.*' . (($orderBy == 'RAND()') ? ', RANDOM() rand' : '');
        if ($useJoins === true) {
            $selection = $this->addJoinsToSelection($selection);
        }

        // create base selection query
        $q = Doctrine_Query::create()
            ->select($selection)
            ->from('KnowledgeBase_Model_Ticket tbl');

        // add join information
        if ($useJoins === true) {
            $this->addJoinsToFrom($q);
        }

        if (!empty($where)) {
            $q->where('tbl.' . $where);
        }

        // use FilterUtil to support generic filtering
        $fu = new FilterUtil('KnowledgeBase', $this);

        $filter = '';
        /*if (isset($args['filter'])) {
            $filter = $args['filter'];
        }*/
        $searchterm = /*((isset($args['term']) ? $args['term'] : */FormUtil::getPassedValue('term', '', 'GET');//));
        if (!empty($searchterm)) {
            //if (!empty($filter)) $filter .= ',';
            //$filter .= 'subject:like:%' . $searchterm . '%,content:like:%' . $searchterm . '%';
            if (!empty($filter)) $filter .= ' AND ';
            $filter .= '(zk_subject LIKE \'%' . DataUtil::formatForStore($searchterm) . '%\' OR zk_content LIKE \'%' . DataUtil::formatForStore($searchterm) . '%\')';
        }
        if (!empty($filter)) {
            $fu->setFilter($filter);
        }

        // you could set explicit filters at this point, something like
        // $fu->setFilter('type:eq:' . $args['type'] . ',id:eq:' . $args['id']);
        // supported operators: eq, ne, like, lt, le, gt, ge, null, notnull

        // process request input filters and add them to the query.
        $fu->enrichQuery($q);

/** TODO apply category filters by using Categorisable behavior
        // category filters
        $category = ((isset($args['category']) ? $args['category'] : FormUtil::getPassedValue('cat', 0, 'GET')));
        if ($category > 0) {
            $catProp = 'TicketCategoryMain';
            $catValue = $category;
            // add category filter including sub categories
            Loader::loadClass('CategoryUtil');

            if (!is_array($objectArray->_objCategoryFilter)) {
                $objectArray->_objCategoryFilter = array();
            }

            $categoryWithSubIDs = array($catValue);
            $subCats = CategoryUtil::getSubCategories($catValue);

            foreach($subCats as $subCat) {
                $categoryWithSubIDs[] = $subCat['id'];
            }

            $objectArray->_objCategoryFilter[$catProp] = $categoryWithSubIDs;
        }
*/

        // add order by clause
        if (!empty($orderBy)) {
            if ($orderBy == 'RAND()') {
                $q->orderBy('rand');
            }
            else {
                $q->orderBy('tbl.' . $orderBy);
            }
        }
        return $q;
    }
}
