<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @link http://zikula.org
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger.
 * @url https://guite.de
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Feb 17 14:43:00 CET 2011.
 */

/**
 * Model class that defines the entity structure and behaviours.
 *
 * This is the base record class for ticket entities.
 */
class KnowledgeBase_Model_Base_Ticket extends Doctrine_Record
{
    /**
     * Set table definition.
     * Define columns, indexes and other information about the table schema.
     *
     * @return void
     */
    public function setTableDefinition()
    {
        $this->setTableName('kbase_ticket');

        /**
         * Columns
         */
        $this->hasColumn('ticketid', 'integer', 11, array(
            'type'          => 'integer',
            'primary'       => true,
            'autoincrement' => true,
            // Check if given value is unsigned (note: this is not portable)
            'unsigned'      => true,
            // ensure no 'not null' constraint
            'notnull'       => false,
            // check if value is unique in its database table
            'unique'        => true,
            'length'        => 11
        ));
        $this->hasColumn('subject', 'string', 255, array(
            'type'    => 'string',

            // ensure no 'not null' constraint
            'notnull' => false,
            'length'  => 255
        ));
        $this->hasColumn('content', 'string', null, array(
            'type'    => 'string',

            // ensure no 'not null' constraint
            'notnull' => false,
            'length'  => null
        ));
        $this->hasColumn('views', 'integer', 11, array(
            'type'    => 'integer',
            'default' => 0,
            // ensure no 'not null' constraint
            'notnull' => false,
            'length'  => 11
        ));
        $this->hasColumn('ratesUp', 'integer', 4, array(
            'type'    => 'integer',
            'default' => 0,
            // ensure no 'not null' constraint
            'notnull' => false,
            'length'  => 4
        ));
        $this->hasColumn('ratesDown', 'integer', 4, array(
            'type'    => 'integer',
            'default' => 0,
            // ensure no 'not null' constraint
            'notnull' => false,
            'length'  => 4
        ));

        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');

    }

    /**
     * Record setup.
     * Define relationships and attach behaviours.
     *
     * @return void
     */
    public function setUp()
    {
        /**
         * Relations
         */

        /**
         * Behaviours
         */
        // Automatic permalink generation
        // See http://code.zikula.org/core/ticket/2401 for possible future support in the Zikula core
        $slug = new Doctrine_Template_Sluggable(array(
            'name'      => 'slug',
            'type'      => 'string',
            'unique'    => true,
            'fields'    => array('subject'),
            'canUpdate' => false
        ));

        $this->actAs($slug);

        // Mark items as removed instead of really deleting them
        $this->actAs('SoftDelete');

        // Zikula standard fields (obj_status, cr_uid, cr_date, lu_uid, lu_date)
        $this->actAs('Zikula_Doctrine_Template_StandardFields');
        // Categorisable support
        $this->actAs('Zikula_Doctrine_Template_Categorisable');

        /**
         * Event listeners registrations
         */
        $this->addListener(new KnowledgeBase_Model_TicketListener());

    }
}
