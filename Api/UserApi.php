<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger (Guite)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Axel Guckelsberger <info@guite.de>.
 * @link https://guite.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.1 (http://modulestudio.de).
 */

namespace Guite\KnowledgeBaseModule\Api;

use Guite\KnowledgeBaseModule\Api\Base\UserApi as BaseUserApi;

use CategoryRegistryUtil;
use CategoryUtil;
use DataUtil;
use LogUtil;
use ModUtil;
use SecurityUtil;

/**
 * This is the User api helper class.
 */
class UserApi extends BaseUserApi
{
    /**
     * Retrieve flat or full list of categories for the GuiteKnowledgeBaseModule application.
     */
    public function getCategories($args)
    {
        $full = (isset($args['full']) && $args['full']);
        $flat = !$full;

        $baseCatPath = $this->getVar('baseCatTicketCategoryMain');
        $baseCat = CategoryRegistryUtil::getRegisteredModuleCategory($this->name, 'kbase_ticket', 'TicketCategoryMain');
        $categories = CategoryUtil::getSubCategories($baseCat, $full);
        if (is_array($categories)) {
            foreach ($categories as $k => $cat) {
                $categories[$k]['name'] = $cat['name'];
                $categories[$k]['nameStripped'] = str_replace('"', '\'', DataUtil::formatForDisplay($cat['name']));
                if (!isset($args['skipurlbuilding'])) {
                    $categories[$k]['viewurl'] = ModUtil::url($this->name, 'user', 'view', array('cat' => $cat['id']));
                    $categories[$k]['viewurlFormatted'] = DataUtil::formatForDisplay($categories[$k]['viewurl']);
                }

                $relPath = str_replace($baseCatPath . '/', '', $cat['path']);
                $relPathParts = explode('/', $relPath);
                $categories[$k]['level'] = count($relPathParts);

                if (!isset($args['skipticketassignment'])) {
                    list($objectData, $objcount) = $this->getTickets(array('category' => $cat['id'], 'term' => ''));
                    $categories[$k]['tickets'] = $objectData;
                    $categories[$k]['ticketcount'] = $objcount;
                }
            }

            return $categories;
        } else {
            return array();
        }
    }

    /**
     * Retrieve ticket objects from database based on different criteria
     *
     * @author       Axel Guckelsberger
     * @params       TODO
     * @return       Render output
     */
    public function getTickets($args)
    {
    // DEBUG: permission check aspect starts
        if (!SecurityUtil::checkPermission('GuiteKnowledgeBaseModule::', '::', ACCESS_READ)) {
            return LogUtil::registerPermissionError();
        }
    // DEBUG: permission check aspect ends

        $objectType = 'ticket';

        $entityClass = 'GuiteKnowledgeBaseModule:' . ucwords($objectType) . 'Entity';
        $repository = $this->entityManager->getRepository($entityClass);

        // parameter for used sorting field
        $sort = (isset($args['sort']) && !empty($args['sort'])) ? $args['sort'] : $this->request->query->filter('sort', '', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }

        // parameter for used sort order
        $sdir = (isset($args['sortdir']) && !empty($args['sortdir'])) ? $args['sortdir'] : $this->request->query->filter('sortdir', '', FILTER_SANITIZE_STRING);
        $sdir = strtolower($sdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }

        // the current offset which is used to calculate the pagination
        $currentPage = (int) (isset($args['pos']) && !empty($args['pos'])) ? $args['pos'] : $this->request->query->filter('pos', 1, FILTER_VALIDATE_INT);

        // the number of items displayed on a page for pagination
        $resultsPerPage = (int) (isset($args['num']) && !empty($args['num'])) ? $args['num'] : $this->request->query->filter('num', 0, FILTER_VALIDATE_INT);
        // legacy
        if (isset($args['amount']) && !empty($args['amount'])) {
            $resultsPerPage = $args['amount'];
        }

        // convenience vars to make code clearer
        $currentUrlArgs = array('ot' => $objectType);

        $selectionArgs = array(
            'ot' => $objectType,
            'where' => '',
            'orderBy' => $sort . ' ' . $sdir,
            'currentPage' => $currentPage,
            'resultsPerPage' => $resultsPerPage
        );

        // category filters
        $category = ((isset($args['category']) ? $args['category'] : $this->request->query->filter('cat', 0, FILTER_VALIDATE_INT)));
        if ($category > 0) {
            $catProp = 'TicketCategoryMain';
            $catValue = $category;
            // add category filter including sub categories

            $categoryFilter = array();

            $categoryWithSubIDs = array($catValue);
            $subCats = CategoryUtil::getSubCategories($catValue);
            foreach($subCats as $subCat) {
                $categoryWithSubIDs[] = $subCat['id'];
            }

            $categoryFilter[$catProp] = $categoryWithSubIDs;
            $selectionArgs['where'] = 'tblCategory.id IN (' . implode(',', $categoryWithSubIDs) . ')';
        }

        return ModUtil::apiFunc($this->name, 'selection', 'getEntitiesPaginated', $selectionArgs);
    }


/** OLD VERSIONS, COMMENTED OUT FOR THE MOMENT AS THE NEW ROUTING_BASED PATTERN
    IS MORE FLEXIBLE, BUT DOES NOT CONTAIN CATEGORIES INFORMATION YET
    /**
     * form custom url string
     *
     * @author       Axel Guckelsberger
     * @return       string custom url string
     * /
    public function encodeurl($args)
    {
        // check if we have the required input
        if (!isset($args['modname']) || !isset($args['func']) || !isset($args['args'])) {
            return LogUtil::registerError($this->__('Error! Could not do what you wanted. Please check your input.'));
        }

        if (!isset($args['type'])) {
            $args['type'] = 'user';
        }

        $customFuncs = array('view', 'display');
        if (!in_array($args['func'], $customFuncs)) {
            return '';
        }

        // create an empty string ready for population
        $vars = '';

        // display function
        if ($args['func'] == 'view' || $args['func'] == 'display') {
            // for the display function use either the title (if present) or the object's id
            $objectType = 'ticket';

            $tables = DBUtil::getTables();

            if ($args['func'] == 'view') {
                $groupFolder = '';
                if (isset($args['args']['cat']) && !empty($args['args']['cat'])) {
                    $currentCat = $args['args']['cat'];
                    unset($args['args']['cat']);

                    $cats = $this->getCategories(array('full' => true, 'skipurlbuilding' => true, 'skipticketassignment' => true)));
                    foreach ($cats as $cat) {
                        if ($cat['id'] != $currentCat) {
                            continue;
                        }

                        // save current cat information because we have to check the parents first
                        $resultTmp = DataUtil::formatForURL($cat['name']);

                        // process parents
                        $categoryLevel = $cat['level'];
                        $parentID = $cat['parent_id'];
                        while ($categoryLevel > 1) {
                            // get parent
                            foreach ($cats as $catSub) {
                                if ($catSub['id'] != $parentID) {
                                    continue;
                                }
                                $resultTmp = DataUtil::formatForURL($catSub['name']) . '_-_' . $resultTmp;
                                $categoryLevel--;
                                $parentID = $catSub['parent_id'];
                                break;
                            }
                        }

                        $groupFolder .= $resultTmp;
                        break;
                    }
                }
                else {
                    $groupFolder = 'view';
                }
                $vars = $groupFolder . '/';
            }
            elseif ($args['func'] == 'display') {
                $id = 0;
                if (isset($args['args']['id'])) {
                    $id = $args['args']['id'];
                    unset($args['args']['id']);
                }
                if (isset($args['args']['objectid'])) {
                    $id = $args['args']['objectid'];
                    unset($args['args']['objectid']);
                }

                $tableName = 'kbase_' . strtolower($objectType);

                $permalinkField = 'subjecturl';

                if ($id > 0) {
                    $item = DBUtil::selectObjectByID($tableName, $id, strtolower($objectType) . 'id');
                }
                else {
                    $item = DBUtil::selectObjectByID($tableName, $args['args']['title'], $permalinkField);
                    unset($args['args']['title']);
                }

                $groupFolder = 'tickets';
                $vars = $groupFolder . '/' . $item[$permalinkField];

                $vars .= '.' . $item[strtolower($objectType).'id'];
                $fileEnding = '.html';
                if (isset($args['args']['pdf']) && $args['args']['pdf'] == 1) {
                    $fileEnding = '.pdf';
                    unset($args['args']['pdf']);
                }
                $vars .= $fileEnding;
            }
        }

        //all other arguments
        $extraargs = '';
        if (count($args['args']) > 0) {
            $extraargs = array();
            foreach ($args['args'] as $k => $v) {
                $extraargs[] = "$k=$v";
            }
            $extraargs = implode('&', $extraargs);
            if (substr($vars, -1, 1) != '/') {
                $extraargs = '/'. $extraargs;
            }
        }

        return $args['modname'] . '/' . $vars . $extraargs;
    }

    /**
     * decode the custom url string
     *
     * @author       Axel Guckelsberger
     * @return       bool true if successful, false otherwise
     * /
    public function decodeurl($args)
    {
        // check we actually have some vars to work with
        if (!isset($args['vars'])) {
            return LogUtil::registerError($this->__('Error! Could not do what you wanted. Please check your input.'));
        }

        // define the available user functions
        $funcs = array('index', 'view', 'display', 'edit');

        // set the correct function name based on our input
        if (empty($args['vars'][2])) {
            // no func and no vars = index
            System::queryStringSetVar('func', 'index');
            return true;
        } elseif (in_array($args['vars'][2], $funcs)) {
            return false;
        }

        foreach ($_GET as $k => $v) {
            if (in_array($k, array('module', 'type', 'func')) === false) {
                unset($_GET[$k]);
            }
        }

        //get the thing as string
        $url = implode('/', array_slice($args['vars'], 2));
        if (preg_match('~^(\w+)/[^/.]+\.(\d+).html(?:/(\w+=.*))?$~', $url, $matches)) {
            $groupFolder = $matches[1];
            $objectid = $matches[2];
            $extraargs = $matches[3];

            System::queryStringSetVar('func', 'display');
            System::queryStringSetVar('id', $objectid);
        }
        elseif (preg_match('~^(\w+)/[^/.]+\.(\d+).pdf(?:/(\w+=.*))?$~', $url, $matches)) {
            $groupFolder = $matches[1];
            $objectid = $matches[2];
            $extraargs = $matches[3];

            System::queryStringSetVar('func', 'display');
            System::queryStringSetVar('id', $objectid);
            System::queryStringSetVar('pdf', '1');

        } elseif (preg_match('~^([^/]+)(?:/(\w+)(?:/[^/.]+\.(\d+|\w\w))?)?(?:/?|/(\w+=.*))$~', $url, $matches)) {
            $groupFolder = $matches[1];
            $filterelement = $matches[2];
            $filterid = $matches[3];
            $extraargs = $matches[4];

            $groupFolder = explode('_-_', $groupFolder);
            $groupFolder = $groupFolder[count($groupFolder)-1];

            $cats = $this->getCategories(array('full' => true));
            foreach ($cats as $cat) {
                if ($groupFolder == DataUtil::formatForURL($cat['name']) || $groupFolder == $cat['name']) {
                    System::queryStringSetVar('cat', $cat['id']);
                    break;
                }
            }

            System::queryStringSetVar('func', 'view');
        } else {
            System::queryStringSetVar('func', 'view');
        }

        //parse extraargs
        if (isset($extraargs) && !empty($extraargs)) {
            $vars = explode('&', $extraargs);
            if (is_array($vars)) {
                foreach ($vars as $var) {
                    list($k, $v) = explode('=', $var, 2);
                    System::queryStringSetVar($k, $v);
                }
            }
        }

        //set filter
        if (!empty($filter)) {
            $urlfilter = FormUtil::getPassedValue('filter', false, 'GETPOST');
            if (!empty($urlfilter)) {
                $filter = $urlfilter .','.$filter; 
            }
            System::queryStringSetVar('filter', $filter);
        }

        return true;
    }
*/
}
