<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @link http://zikula.org
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger.
 * @url https://guite.de
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Jan 27 15:07:46 CET 2011.
 */


/**
 * Mailz api base class
 */
class KnowledgeBase_Api_Base_Mailz extends Zikula_Api
{
    /**
     * Get mailz plugins with type / title
     *
     * @param   $args['id']     int     optional, show specific one or all otherwise
     * @return  array
     */
    public function getPlugins($args)
    {
        $plugins = array();
        $plugins[] = array(
            'pluginid'      => 1,
            'module'        => 'KnowledgeBase',
            'title'         => $this->__('3 newest tickets'),
            'description'   => $this->__('A list of the three newest tickets.')
        );
        $plugins[] = array(
            'pluginid'      => 2,
            'module'        => 'KnowledgeBase',
            'title'         => $this->__('3 random tickets'),
            'description'   => $this->__('A list of three random tickets.')
        );
        return $plugins;
    }

    /**
     * Get content for plugins
     *
     * @param   $args['pluginid']       int         id number of plugin (internal id for this module, see getPlugins method)
     * @param   $args['params']         string      optional, show specific one or all otherwise
     * @param   $args['uid']            int         optional, user id for user specific content
     * @param   $args['contenttype']    string      h or t for html or text
     * @param   $args['last']           datetime    timtestamp of last newsletter
     * @return  array
     */
    public function getContent($args)
    {
// $args is something like:
// Array ( [uid] => 5 [contenttype] => h [pluginid] => 1 [nid] => 1 [last] => 0000-00-00 00:00:00 [params] => Array ( [] => ) ) 1
        $objectType = 'ticket';
        // instantiate a new collection corresponding to $objectType
        $objectCollection = KnowledgeBase_Factory::getBusinessCollection($objectType, 'mailz', array('controller' => 'mailz', 'action' => 'getContent'));

        $sortParam = '';
        if ($args['pluginid'] == 2) $sortParam = 'RAND()';
        elseif ($args['pluginid'] == 1) $sortParam = $objectCollection->get_intIdField() . ' DESC';

        $resultsPerPage = 3;

        // get objects from database
        // while the result will be saved in the object, we assign in to a local variable for convenience.
        $objectData = $objectCollection->selectWherePaginated($this->filter, $sortParam, -1, $resultsPerPage);

        // get total number of records for building the pagination by method call
        //$objectCount = $objectCollection->selectCount($where);

        $output = '';
        if ($args['contenttype'] == 't') { /* text */
            $counter = 0;
            $output .= "\n";
            foreach ($objectData as $object) {
                $counter++;
                $output .= $counter . '. ' . $object['subject'] . "\n";
            }
        } else {
            $this->view->setCaching(true);

            //$data = array('sorting' => $this->sorting, 'amount' => $this->amount, 'filter' => $this->filter, 'template' => $this->template);
            //$this->view->assign('vars', $data);
            $this->view->assign('objectType', 'ticket')
                       ->assign('items', $objectData);

            //$output = $this->view->fetch('contenttype/itemlist_display.html');
            $output = $this->view->fetch('KnowledgeBase_mailz_itemlist.htm');
        }
        return $output;
    }

}
