<?php
/**
 * KnowledgeBase.
 *
 * @copyright Axel Guckelsberger
 * @link http://zikula.org
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package KnowledgeBase
 * @author Axel Guckelsberger.
 * @url https://guite.de
 * @version Generated by ModuleStudio 0.5.2 (http://modulestudio.de) at Thu Feb 17 14:43:00 CET 2011.
 */

/**
 * Doctrine_Table class used to implement own special entity methods.
 * For example it can provide convenience methods for performing certain DQL queries.
 *
 * This is the base table class for ticket entities.
 */
class KnowledgeBase_Model_Base_TicketTable extends Doctrine_Table
{
    /**
     * Hook into the constructor process.
     */
    public function construct()
    {
    }

    /**
     * Helper method for truncating the table.
     * Used during installation when inserting default data.
     */
    public function truncateTable()
    {
        $q = Doctrine_Query::create()
            ->delete('KnowledgeBase_Model_Ticket');
        $q->execute();
    }

    /**
     * Select object from the database.
     *
     * @param integer $id              The id to use to retrieve the object (optional) (default=null).
     * @param boolean $asArray         Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins        Whether to include joining related objects (optional) (default=true).
     * @return array|Doctrine_Record retrieved data array or Doctrine_Record instance
     */
    public function selectOneItemById($id = 0, $asArray = true, $useJoins = true)
    {
        $q = $this->_intBaseQuery('', '', $useJoins)
            ->where('tbl.ticketid = ?', $id);

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        return $q->fetchOne(array(), $fetchType);
    }

    /**
     * Select object by slug field
     *
     * @param string  $slugTitle       The slug value
     * @param boolean $asArray         Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins        Whether to include joining related objects (optional) (default=true).
     * @return array|Doctrine_Record retrieved data array or Doctrine_Record instance
     */
    public function selectOneItemBySlug($slugTitle = '', $asArray = true, $useJoins = true)
    {
        $q = $this->_intBaseQuery('', '', $useJoins)
            ->where('tbl.slug = ?', $slugTitle);

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        return $q->fetchOne(array(), $fetchType);
    }

    /**
     * Select a collection.
     *
     * @param string $where             The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy           The order-by clause to use when retrieving the object array (optional) (default='').
     * @param boolean $useJoins         Whether to include joining related objects (optional) (default=true).
     */
    public function selectCollection($where = '', $orderBy = '', $useJoins = true)
    {
        $q = $this->_intBaseQuery($where, $orderBy, $useJoins);
        return $q->execute(array(), Doctrine_Core::HYDRATE_ARRAY);
    }

    /**
     * Select with a given where clause.
     *
     * @param string $where             The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy           The order-by clause to use when retrieving the object array (optional) (default='').
     * @param integer $currentPage      Where to start selection
     * @param integer $resultsPerPage   Amount of items to select
     * @param boolean $asArray          Whether to return the result as array instead as record object (optional) (default=true).
     * @param boolean $useJoins         Whether to include joining related objects (optional) (default=true).
     * @return array|Doctrine_Collection retrieved data array or collection containing retrieved Doctrine_Record instances
     */
    public function selectWherePaginated($where = '', $orderBy = '', $currentPage = 1, $resultsPerPage = 25, $asArray = true, $useJoins = true)
    {
        $pager = new Doctrine_Pager($this->_intBaseQuery($where, $orderBy, $useJoins),
            $currentPage,
            $resultsPerPage);
        /* TODO: see http://www.doctrine-project.org/projects/orm/1.2/docs/manual/utilities/en */
        //$pager->setCountQuery($query);

        $fetchType = (($asArray) ? Doctrine_Core::HYDRATE_ARRAY : Doctrine_Core::HYDRATE_RECORD);
        return $pager->execute(array(), $fetchType);
    }

    /**
     * Select count with a given where clause.
     *
     * @param string $where             The where clause to use when retrieving the object count (optional) (default='').
     * @param boolean $useJoins         Whether to include joining related objects (optional) (default=true).
     * @return integer amount of affected records
     */
    public function selectCount($where = '', $useJoins = true)
    {
        // TODO: fix usage of joins; please remove the following line and test.
        $useJoins = false;

        $selection = 'COUNT(tbl.ticketid) AS numTickets';
        if ($useJoins === true) {
            $selection = $this->addJoinsToSelection($selection);
        }

        $q = Doctrine_Query::create()
            ->select($selection)
            ->from('KnowledgeBase_Model_Ticket tbl');

        if ($useJoins === true) {
            $this->addJoinsToFrom($q);
        }

        if (!empty($where)) {
            $q->where($where);
        }
        return $q->fetchOne(array(), Doctrine_Core::HYDRATE_SINGLE_SCALAR);
    }

    /**
     * Build a generic Doctrine query supporting WHERE and ORDER BY
     *
     * @param string $where             The where clause to use when retrieving the object array (optional) (default='').
     * @param string $orderBy           The order-by clause to use when retrieving the object array (optional) (default='').
     * @param boolean $useJoins         Whether to include joining related objects (optional) (default=true).
     * @return Doctrine_Query query instance to be further processed
     */
    protected function _intBaseQuery($where = '', $orderBy = '', $useJoins = true)
    {
        $selection = 'tbl.*' . (($orderBy == 'RAND()') ? ', RANDOM() rand' : '');
        if ($useJoins === true) {
            $selection = $this->addJoinsToSelection($selection);
        }

        // create base selection query
        $q = Doctrine_Query::create()
            ->select($selection)
            ->from('KnowledgeBase_Model_Ticket tbl');

        // add join information
        if ($useJoins === true) {
            $this->addJoinsToFrom($q);
        }

        if (!empty($where)) {
            $q->where('tbl.' . $where);
        }

        // use FilterUtil to support generic filtering
        $fu = new FilterUtil('KnowledgeBase', $this);

        // you could set explicit filters at this point, something like
        // $fu->setFilter('type:eq:' . $args['type'] . ',id:eq:' . $args['id']);
        // supported operators: eq, ne, like, lt, le, gt, ge, null, notnull

        // process request input filters and add them to the query.
        $fu->enrichQuery($q);

        // add order by clause
        if (!empty($orderBy)) {
            if ($orderBy == 'RAND()') {
                $q->orderBy('rand');
            } else {
                $q->orderBy('tbl.' . $orderBy);
            }
        }
        return $q;
    }

    /**
     * Helper method to add join selections
     *
     * @param String $selection           Input select string to be enhanced
     */
    protected function addJoinsToSelection($selection)
    {
        $selection .= '';
        return $selection;
    }

    /**
     * Helper method to add joins to from clause
     *
     * @param Doctrine_Query $q           Reference to query to be enriched
     */
    protected function addJoinsToFrom(Doctrine_Query $q)
    {
    }
}
